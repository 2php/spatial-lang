// pr_region_alternate.v

// Generated using ACDS version 17.1 240

`timescale 1 ps / 1 ps
module pr_region_alternate (
		input  wire         clk_clk,          //     clk.clk
		output wire [5:0]   m_axi_0_awid,     // m_axi_0.awid
		output wire [31:0]  m_axi_0_awuser,   //        .awuser
		output wire [31:0]  m_axi_0_awaddr,   //        .awaddr
		output wire [7:0]   m_axi_0_awlen,    //        .awlen
		output wire [2:0]   m_axi_0_awsize,   //        .awsize
		output wire [1:0]   m_axi_0_awburst,  //        .awburst
		output wire         m_axi_0_awlock,   //        .awlock
		output wire [3:0]   m_axi_0_awcache,  //        .awcache
		output wire [2:0]   m_axi_0_awprot,   //        .awprot
		output wire [3:0]   m_axi_0_awqos,    //        .awqos
		output wire         m_axi_0_awvalid,  //        .awvalid
		input  wire         m_axi_0_awready,  //        .awready
		output wire [5:0]   m_axi_0_arid,     //        .arid
		output wire [31:0]  m_axi_0_aruser,   //        .aruser
		output wire [31:0]  m_axi_0_araddr,   //        .araddr
		output wire [7:0]   m_axi_0_arlen,    //        .arlen
		output wire [2:0]   m_axi_0_arsize,   //        .arsize
		output wire [1:0]   m_axi_0_arburst,  //        .arburst
		output wire         m_axi_0_arlock,   //        .arlock
		output wire [3:0]   m_axi_0_arcache,  //        .arcache
		output wire [2:0]   m_axi_0_arprot,   //        .arprot
		output wire [3:0]   m_axi_0_arqos,    //        .arqos
		output wire         m_axi_0_arvalid,  //        .arvalid
		input  wire         m_axi_0_arready,  //        .arready
		output wire [511:0] m_axi_0_wdata,    //        .wdata
		output wire [63:0]  m_axi_0_wstrb,    //        .wstrb
		output wire         m_axi_0_wlast,    //        .wlast
		output wire         m_axi_0_wvalid,   //        .wvalid
		input  wire         m_axi_0_wready,   //        .wready
		input  wire [5:0]   m_axi_0_rid,      //        .rid
		input  wire [31:0]  m_axi_0_ruser,    //        .ruser
		input  wire [511:0] m_axi_0_rdata,    //        .rdata
		input  wire [1:0]   m_axi_0_rresp,    //        .rresp
		input  wire         m_axi_0_rlast,    //        .rlast
		input  wire         m_axi_0_rvalid,   //        .rvalid
		output wire         m_axi_0_rready,   //        .rready
		input  wire [5:0]   m_axi_0_bid,      //        .bid
		input  wire [31:0]  m_axi_0_buser,    //        .buser
		input  wire [1:0]   m_axi_0_bresp,    //        .bresp
		input  wire         m_axi_0_bvalid,   //        .bvalid
		output wire         m_axi_0_bready,   //        .bready
		input  wire         reset_reset,      //   reset.reset
		output wire         s0_waitrequest,   //      s0.waitrequest
		output wire [31:0]  s0_readdata,      //        .readdata
		output wire         s0_readdatavalid, //        .readdatavalid
		input  wire [0:0]   s0_burstcount,    //        .burstcount
		input  wire [31:0]  s0_writedata,     //        .writedata
		input  wire [9:0]   s0_address,       //        .address
		input  wire         s0_write,         //        .write
		input  wire         s0_read,          //        .read
		input  wire [3:0]   s0_byteenable,    //        .byteenable
		input  wire         s0_debugaccess    //        .debugaccess
	);

	wire         clock_in_out_clk_clk;                                  // clock_in:out_clk -> [Top_DUT_0:clock, mm_bridge_0:clk, mm_interconnect_0:clock_in_out_clk_clk, reset_in:clk, sysid_qsys_0:clock]
	wire         reset_in_out_reset_reset;                              // reset_in:out_reset -> [Top_DUT_0:reset, mm_bridge_0:reset, mm_interconnect_0:mm_bridge_0_reset_reset_bridge_in_reset_reset, sysid_qsys_0:reset_n]
	wire         mm_bridge_0_m0_waitrequest;                            // mm_interconnect_0:mm_bridge_0_m0_waitrequest -> mm_bridge_0:m0_waitrequest
	wire  [31:0] mm_bridge_0_m0_readdata;                               // mm_interconnect_0:mm_bridge_0_m0_readdata -> mm_bridge_0:m0_readdata
	wire         mm_bridge_0_m0_debugaccess;                            // mm_bridge_0:m0_debugaccess -> mm_interconnect_0:mm_bridge_0_m0_debugaccess
	wire   [9:0] mm_bridge_0_m0_address;                                // mm_bridge_0:m0_address -> mm_interconnect_0:mm_bridge_0_m0_address
	wire         mm_bridge_0_m0_read;                                   // mm_bridge_0:m0_read -> mm_interconnect_0:mm_bridge_0_m0_read
	wire   [3:0] mm_bridge_0_m0_byteenable;                             // mm_bridge_0:m0_byteenable -> mm_interconnect_0:mm_bridge_0_m0_byteenable
	wire         mm_bridge_0_m0_readdatavalid;                          // mm_interconnect_0:mm_bridge_0_m0_readdatavalid -> mm_bridge_0:m0_readdatavalid
	wire  [31:0] mm_bridge_0_m0_writedata;                              // mm_bridge_0:m0_writedata -> mm_interconnect_0:mm_bridge_0_m0_writedata
	wire         mm_bridge_0_m0_write;                                  // mm_bridge_0:m0_write -> mm_interconnect_0:mm_bridge_0_m0_write
	wire   [0:0] mm_bridge_0_m0_burstcount;                             // mm_bridge_0:m0_burstcount -> mm_interconnect_0:mm_bridge_0_m0_burstcount
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata; // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;  // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_top_dut_0_io_s_avalon_chipselect;    // mm_interconnect_0:Top_DUT_0_io_S_AVALON_chipselect -> Top_DUT_0:io_S_AVALON_chipselect
	wire  [31:0] mm_interconnect_0_top_dut_0_io_s_avalon_readdata;      // Top_DUT_0:io_S_AVALON_readdata -> mm_interconnect_0:Top_DUT_0_io_S_AVALON_readdata
	wire   [6:0] mm_interconnect_0_top_dut_0_io_s_avalon_address;       // mm_interconnect_0:Top_DUT_0_io_S_AVALON_address -> Top_DUT_0:io_S_AVALON_address
	wire         mm_interconnect_0_top_dut_0_io_s_avalon_read;          // mm_interconnect_0:Top_DUT_0_io_S_AVALON_read -> Top_DUT_0:io_S_AVALON_read
	wire         mm_interconnect_0_top_dut_0_io_s_avalon_write;         // mm_interconnect_0:Top_DUT_0_io_S_AVALON_write -> Top_DUT_0:io_S_AVALON_write
	wire  [31:0] mm_interconnect_0_top_dut_0_io_s_avalon_writedata;     // mm_interconnect_0:Top_DUT_0_io_S_AVALON_writedata -> Top_DUT_0:io_S_AVALON_writedata

	pr_region_alternate_Top_DUT_0 top_dut_0 (
		.clock                  (clock_in_out_clk_clk),                               //   input,    width = 1,       clock.clk
		.io_M_AXI_0_AWID        (m_axi_0_awid),                                       //  output,    width = 6,  io_M_AXI_0.awid
		.io_M_AXI_0_AWUSER      (m_axi_0_awuser),                                     //  output,   width = 32,            .awuser
		.io_M_AXI_0_AWADDR      (m_axi_0_awaddr),                                     //  output,   width = 32,            .awaddr
		.io_M_AXI_0_AWLEN       (m_axi_0_awlen),                                      //  output,    width = 8,            .awlen
		.io_M_AXI_0_AWSIZE      (m_axi_0_awsize),                                     //  output,    width = 3,            .awsize
		.io_M_AXI_0_AWBURST     (m_axi_0_awburst),                                    //  output,    width = 2,            .awburst
		.io_M_AXI_0_AWLOCK      (m_axi_0_awlock),                                     //  output,    width = 1,            .awlock
		.io_M_AXI_0_AWCACHE     (m_axi_0_awcache),                                    //  output,    width = 4,            .awcache
		.io_M_AXI_0_AWPROT      (m_axi_0_awprot),                                     //  output,    width = 3,            .awprot
		.io_M_AXI_0_AWQOS       (m_axi_0_awqos),                                      //  output,    width = 4,            .awqos
		.io_M_AXI_0_AWVALID     (m_axi_0_awvalid),                                    //  output,    width = 1,            .awvalid
		.io_M_AXI_0_AWREADY     (m_axi_0_awready),                                    //   input,    width = 1,            .awready
		.io_M_AXI_0_ARID        (m_axi_0_arid),                                       //  output,    width = 6,            .arid
		.io_M_AXI_0_ARUSER      (m_axi_0_aruser),                                     //  output,   width = 32,            .aruser
		.io_M_AXI_0_ARADDR      (m_axi_0_araddr),                                     //  output,   width = 32,            .araddr
		.io_M_AXI_0_ARLEN       (m_axi_0_arlen),                                      //  output,    width = 8,            .arlen
		.io_M_AXI_0_ARSIZE      (m_axi_0_arsize),                                     //  output,    width = 3,            .arsize
		.io_M_AXI_0_ARBURST     (m_axi_0_arburst),                                    //  output,    width = 2,            .arburst
		.io_M_AXI_0_ARLOCK      (m_axi_0_arlock),                                     //  output,    width = 1,            .arlock
		.io_M_AXI_0_ARCACHE     (m_axi_0_arcache),                                    //  output,    width = 4,            .arcache
		.io_M_AXI_0_ARPROT      (m_axi_0_arprot),                                     //  output,    width = 3,            .arprot
		.io_M_AXI_0_ARQOS       (m_axi_0_arqos),                                      //  output,    width = 4,            .arqos
		.io_M_AXI_0_ARVALID     (m_axi_0_arvalid),                                    //  output,    width = 1,            .arvalid
		.io_M_AXI_0_ARREADY     (m_axi_0_arready),                                    //   input,    width = 1,            .arready
		.io_M_AXI_0_WDATA       (m_axi_0_wdata),                                      //  output,  width = 512,            .wdata
		.io_M_AXI_0_WSTRB       (m_axi_0_wstrb),                                      //  output,   width = 64,            .wstrb
		.io_M_AXI_0_WLAST       (m_axi_0_wlast),                                      //  output,    width = 1,            .wlast
		.io_M_AXI_0_WVALID      (m_axi_0_wvalid),                                     //  output,    width = 1,            .wvalid
		.io_M_AXI_0_WREADY      (m_axi_0_wready),                                     //   input,    width = 1,            .wready
		.io_M_AXI_0_RID         (m_axi_0_rid),                                        //   input,    width = 6,            .rid
		.io_M_AXI_0_RUSER       (m_axi_0_ruser),                                      //   input,   width = 32,            .ruser
		.io_M_AXI_0_RDATA       (m_axi_0_rdata),                                      //   input,  width = 512,            .rdata
		.io_M_AXI_0_RRESP       (m_axi_0_rresp),                                      //   input,    width = 2,            .rresp
		.io_M_AXI_0_RLAST       (m_axi_0_rlast),                                      //   input,    width = 1,            .rlast
		.io_M_AXI_0_RVALID      (m_axi_0_rvalid),                                     //   input,    width = 1,            .rvalid
		.io_M_AXI_0_RREADY      (m_axi_0_rready),                                     //  output,    width = 1,            .rready
		.io_M_AXI_0_BID         (m_axi_0_bid),                                        //   input,    width = 6,            .bid
		.io_M_AXI_0_BUSER       (m_axi_0_buser),                                      //   input,   width = 32,            .buser
		.io_M_AXI_0_BRESP       (m_axi_0_bresp),                                      //   input,    width = 2,            .bresp
		.io_M_AXI_0_BVALID      (m_axi_0_bvalid),                                     //   input,    width = 1,            .bvalid
		.io_M_AXI_0_BREADY      (m_axi_0_bready),                                     //  output,    width = 1,            .bready
		.io_S_AVALON_address    (mm_interconnect_0_top_dut_0_io_s_avalon_address),    //   input,    width = 7, io_S_AVALON.address
		.io_S_AVALON_readdata   (mm_interconnect_0_top_dut_0_io_s_avalon_readdata),   //  output,   width = 32,            .readdata
		.io_S_AVALON_chipselect (mm_interconnect_0_top_dut_0_io_s_avalon_chipselect), //   input,    width = 1,            .chipselect
		.io_S_AVALON_write      (mm_interconnect_0_top_dut_0_io_s_avalon_write),      //   input,    width = 1,            .write
		.io_S_AVALON_read       (mm_interconnect_0_top_dut_0_io_s_avalon_read),       //   input,    width = 1,            .read
		.io_S_AVALON_writedata  (mm_interconnect_0_top_dut_0_io_s_avalon_writedata),  //   input,   width = 32,            .writedata
		.reset                  (reset_in_out_reset_reset)                            //   input,    width = 1,       reset.reset
	);

	pr_region_alternate_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	pr_region_alternate_mm_bridge_0 mm_bridge_0 (
		.clk              (clock_in_out_clk_clk),         //   input,   width = 1,   clk.clk
		.m0_waitrequest   (mm_bridge_0_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (mm_bridge_0_m0_readdata),      //   input,  width = 32,      .readdata
		.m0_readdatavalid (mm_bridge_0_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (mm_bridge_0_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (mm_bridge_0_m0_writedata),     //  output,  width = 32,      .writedata
		.m0_address       (mm_bridge_0_m0_address),       //  output,  width = 10,      .address
		.m0_write         (mm_bridge_0_m0_write),         //  output,   width = 1,      .write
		.m0_read          (mm_bridge_0_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (mm_bridge_0_m0_byteenable),    //  output,   width = 4,      .byteenable
		.m0_debugaccess   (mm_bridge_0_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),     //   input,   width = 1, reset.reset
		.s0_waitrequest   (s0_waitrequest),               //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (s0_readdata),                  //  output,  width = 32,      .readdata
		.s0_readdatavalid (s0_readdatavalid),             //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (s0_burstcount),                //   input,   width = 1,      .burstcount
		.s0_writedata     (s0_writedata),                 //   input,  width = 32,      .writedata
		.s0_address       (s0_address),                   //   input,  width = 10,      .address
		.s0_write         (s0_write),                     //   input,   width = 1,      .write
		.s0_read          (s0_read),                      //   input,   width = 1,      .read
		.s0_byteenable    (s0_byteenable),                //   input,   width = 4,      .byteenable
		.s0_debugaccess   (s0_debugaccess)                //   input,   width = 1,      .debugaccess
	);

	pr_region_alternate_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	pr_region_alternate_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clock_in_out_clk_clk),                                  //   input,   width = 1,           clk.clk
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //   input,   width = 1,              .address
		.reset_n  (~reset_in_out_reset_reset)                              //   input,   width = 1,         reset.reset_n
	);

	pr_region_alternate_altera_mm_interconnect_171_7ub5spi mm_interconnect_0 (
		.Top_DUT_0_io_S_AVALON_address                 (mm_interconnect_0_top_dut_0_io_s_avalon_address),       //  output,   width = 7,                   Top_DUT_0_io_S_AVALON.address
		.Top_DUT_0_io_S_AVALON_write                   (mm_interconnect_0_top_dut_0_io_s_avalon_write),         //  output,   width = 1,                                        .write
		.Top_DUT_0_io_S_AVALON_read                    (mm_interconnect_0_top_dut_0_io_s_avalon_read),          //  output,   width = 1,                                        .read
		.Top_DUT_0_io_S_AVALON_readdata                (mm_interconnect_0_top_dut_0_io_s_avalon_readdata),      //   input,  width = 32,                                        .readdata
		.Top_DUT_0_io_S_AVALON_writedata               (mm_interconnect_0_top_dut_0_io_s_avalon_writedata),     //  output,  width = 32,                                        .writedata
		.Top_DUT_0_io_S_AVALON_chipselect              (mm_interconnect_0_top_dut_0_io_s_avalon_chipselect),    //  output,   width = 1,                                        .chipselect
		.clock_in_out_clk_clk                          (clock_in_out_clk_clk),                                  //   input,   width = 1,                        clock_in_out_clk.clk
		.mm_bridge_0_m0_address                        (mm_bridge_0_m0_address),                                //   input,  width = 10,                          mm_bridge_0_m0.address
		.mm_bridge_0_m0_waitrequest                    (mm_bridge_0_m0_waitrequest),                            //  output,   width = 1,                                        .waitrequest
		.mm_bridge_0_m0_burstcount                     (mm_bridge_0_m0_burstcount),                             //   input,   width = 1,                                        .burstcount
		.mm_bridge_0_m0_byteenable                     (mm_bridge_0_m0_byteenable),                             //   input,   width = 4,                                        .byteenable
		.mm_bridge_0_m0_read                           (mm_bridge_0_m0_read),                                   //   input,   width = 1,                                        .read
		.mm_bridge_0_m0_readdata                       (mm_bridge_0_m0_readdata),                               //  output,  width = 32,                                        .readdata
		.mm_bridge_0_m0_readdatavalid                  (mm_bridge_0_m0_readdatavalid),                          //  output,   width = 1,                                        .readdatavalid
		.mm_bridge_0_m0_write                          (mm_bridge_0_m0_write),                                  //   input,   width = 1,                                        .write
		.mm_bridge_0_m0_writedata                      (mm_bridge_0_m0_writedata),                              //   input,  width = 32,                                        .writedata
		.mm_bridge_0_m0_debugaccess                    (mm_bridge_0_m0_debugaccess),                            //   input,   width = 1,                                        .debugaccess
		.mm_bridge_0_reset_reset_bridge_in_reset_reset (reset_in_out_reset_reset),                              //   input,   width = 1, mm_bridge_0_reset_reset_bridge_in_reset.reset
		.sysid_qsys_0_control_slave_address            (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //  output,   width = 1,              sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata           (mm_interconnect_0_sysid_qsys_0_control_slave_readdata)  //   input,  width = 32,                                        .readdata
	);

endmodule
