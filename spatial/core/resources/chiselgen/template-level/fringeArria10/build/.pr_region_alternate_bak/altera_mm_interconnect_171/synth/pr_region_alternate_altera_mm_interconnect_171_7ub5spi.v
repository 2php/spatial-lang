// pr_region_alternate_altera_mm_interconnect_171_7ub5spi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 240

`timescale 1 ps / 1 ps
module pr_region_alternate_altera_mm_interconnect_171_7ub5spi (
		output wire [6:0]  Top_DUT_0_io_S_AVALON_address,                 //                   Top_DUT_0_io_S_AVALON.address
		output wire        Top_DUT_0_io_S_AVALON_write,                   //                                        .write
		output wire        Top_DUT_0_io_S_AVALON_read,                    //                                        .read
		input  wire [31:0] Top_DUT_0_io_S_AVALON_readdata,                //                                        .readdata
		output wire [31:0] Top_DUT_0_io_S_AVALON_writedata,               //                                        .writedata
		output wire        Top_DUT_0_io_S_AVALON_chipselect,              //                                        .chipselect
		input  wire        clock_in_out_clk_clk,                          //                        clock_in_out_clk.clk
		input  wire [9:0]  mm_bridge_0_m0_address,                        //                          mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                    //                                        .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                     //                                        .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                     //                                        .byteenable
		input  wire        mm_bridge_0_m0_read,                           //                                        .read
		output wire [31:0] mm_bridge_0_m0_readdata,                       //                                        .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                  //                                        .readdatavalid
		input  wire        mm_bridge_0_m0_write,                          //                                        .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                      //                                        .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                    //                                        .debugaccess
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset, // mm_bridge_0_reset_reset_bridge_in_reset.reset
		output wire [0:0]  sysid_qsys_0_control_slave_address,            //              sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata            //                                        .readdata
	);

	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [9:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire   [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire   [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                      // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire         sysid_qsys_0_control_slave_agent_m0_waitrequest;                   // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_0_control_slave_agent_m0_debugaccess;                   // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [9:0] sysid_qsys_0_control_slave_agent_m0_address;                       // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                    // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire         sysid_qsys_0_control_slave_agent_m0_read;                          // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire         sysid_qsys_0_control_slave_agent_m0_readdatavalid;                 // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_0_control_slave_agent_m0_lock;                          // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                     // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire         sysid_qsys_0_control_slave_agent_m0_write;                         // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                    // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire         sysid_qsys_0_control_slave_agent_rf_source_valid;                  // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [80:0] sysid_qsys_0_control_slave_agent_rf_source_data;                   // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_0_control_slave_agent_rf_source_ready;                  // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire         sysid_qsys_0_control_slave_agent_rf_source_startofpacket;          // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rf_source_endofpacket;            // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;               // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [80:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;               // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;       // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;         // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [79:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                 // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire  [31:0] top_dut_0_io_s_avalon_agent_m0_readdata;                           // Top_DUT_0_io_S_AVALON_translator:uav_readdata -> Top_DUT_0_io_S_AVALON_agent:m0_readdata
	wire         top_dut_0_io_s_avalon_agent_m0_waitrequest;                        // Top_DUT_0_io_S_AVALON_translator:uav_waitrequest -> Top_DUT_0_io_S_AVALON_agent:m0_waitrequest
	wire         top_dut_0_io_s_avalon_agent_m0_debugaccess;                        // Top_DUT_0_io_S_AVALON_agent:m0_debugaccess -> Top_DUT_0_io_S_AVALON_translator:uav_debugaccess
	wire   [9:0] top_dut_0_io_s_avalon_agent_m0_address;                            // Top_DUT_0_io_S_AVALON_agent:m0_address -> Top_DUT_0_io_S_AVALON_translator:uav_address
	wire   [3:0] top_dut_0_io_s_avalon_agent_m0_byteenable;                         // Top_DUT_0_io_S_AVALON_agent:m0_byteenable -> Top_DUT_0_io_S_AVALON_translator:uav_byteenable
	wire         top_dut_0_io_s_avalon_agent_m0_read;                               // Top_DUT_0_io_S_AVALON_agent:m0_read -> Top_DUT_0_io_S_AVALON_translator:uav_read
	wire         top_dut_0_io_s_avalon_agent_m0_readdatavalid;                      // Top_DUT_0_io_S_AVALON_translator:uav_readdatavalid -> Top_DUT_0_io_S_AVALON_agent:m0_readdatavalid
	wire         top_dut_0_io_s_avalon_agent_m0_lock;                               // Top_DUT_0_io_S_AVALON_agent:m0_lock -> Top_DUT_0_io_S_AVALON_translator:uav_lock
	wire  [31:0] top_dut_0_io_s_avalon_agent_m0_writedata;                          // Top_DUT_0_io_S_AVALON_agent:m0_writedata -> Top_DUT_0_io_S_AVALON_translator:uav_writedata
	wire         top_dut_0_io_s_avalon_agent_m0_write;                              // Top_DUT_0_io_S_AVALON_agent:m0_write -> Top_DUT_0_io_S_AVALON_translator:uav_write
	wire   [2:0] top_dut_0_io_s_avalon_agent_m0_burstcount;                         // Top_DUT_0_io_S_AVALON_agent:m0_burstcount -> Top_DUT_0_io_S_AVALON_translator:uav_burstcount
	wire         top_dut_0_io_s_avalon_agent_rf_source_valid;                       // Top_DUT_0_io_S_AVALON_agent:rf_source_valid -> Top_DUT_0_io_S_AVALON_agent_rsp_fifo:in_valid
	wire  [80:0] top_dut_0_io_s_avalon_agent_rf_source_data;                        // Top_DUT_0_io_S_AVALON_agent:rf_source_data -> Top_DUT_0_io_S_AVALON_agent_rsp_fifo:in_data
	wire         top_dut_0_io_s_avalon_agent_rf_source_ready;                       // Top_DUT_0_io_S_AVALON_agent_rsp_fifo:in_ready -> Top_DUT_0_io_S_AVALON_agent:rf_source_ready
	wire         top_dut_0_io_s_avalon_agent_rf_source_startofpacket;               // Top_DUT_0_io_S_AVALON_agent:rf_source_startofpacket -> Top_DUT_0_io_S_AVALON_agent_rsp_fifo:in_startofpacket
	wire         top_dut_0_io_s_avalon_agent_rf_source_endofpacket;                 // Top_DUT_0_io_S_AVALON_agent:rf_source_endofpacket -> Top_DUT_0_io_S_AVALON_agent_rsp_fifo:in_endofpacket
	wire         top_dut_0_io_s_avalon_agent_rsp_fifo_out_valid;                    // Top_DUT_0_io_S_AVALON_agent_rsp_fifo:out_valid -> Top_DUT_0_io_S_AVALON_agent:rf_sink_valid
	wire  [80:0] top_dut_0_io_s_avalon_agent_rsp_fifo_out_data;                     // Top_DUT_0_io_S_AVALON_agent_rsp_fifo:out_data -> Top_DUT_0_io_S_AVALON_agent:rf_sink_data
	wire         top_dut_0_io_s_avalon_agent_rsp_fifo_out_ready;                    // Top_DUT_0_io_S_AVALON_agent:rf_sink_ready -> Top_DUT_0_io_S_AVALON_agent_rsp_fifo:out_ready
	wire         top_dut_0_io_s_avalon_agent_rsp_fifo_out_startofpacket;            // Top_DUT_0_io_S_AVALON_agent_rsp_fifo:out_startofpacket -> Top_DUT_0_io_S_AVALON_agent:rf_sink_startofpacket
	wire         top_dut_0_io_s_avalon_agent_rsp_fifo_out_endofpacket;              // Top_DUT_0_io_S_AVALON_agent_rsp_fifo:out_endofpacket -> Top_DUT_0_io_S_AVALON_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> Top_DUT_0_io_S_AVALON_agent:cp_valid
	wire  [79:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> Top_DUT_0_io_S_AVALON_agent:cp_data
	wire         cmd_mux_001_src_ready;                                             // Top_DUT_0_io_S_AVALON_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> Top_DUT_0_io_S_AVALON_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> Top_DUT_0_io_S_AVALON_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> Top_DUT_0_io_S_AVALON_agent:cp_endofpacket
	wire         mm_bridge_0_m0_agent_cp_valid;                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [79:0] mm_bridge_0_m0_agent_cp_data;                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire         mm_bridge_0_m0_agent_cp_startofpacket;                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_bridge_0_m0_agent_cp_endofpacket;                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_valid;                         // sysid_qsys_0_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [79:0] sysid_qsys_0_control_slave_agent_rp_data;                          // sysid_qsys_0_control_slave_agent:rp_data -> router_001:sink_data
	wire         sysid_qsys_0_control_slave_agent_rp_ready;                         // router_001:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire         sysid_qsys_0_control_slave_agent_rp_startofpacket;                 // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_endofpacket;                   // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire  [79:0] router_001_src_data;                                               // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         top_dut_0_io_s_avalon_agent_rp_valid;                              // Top_DUT_0_io_S_AVALON_agent:rp_valid -> router_002:sink_valid
	wire  [79:0] top_dut_0_io_s_avalon_agent_rp_data;                               // Top_DUT_0_io_S_AVALON_agent:rp_data -> router_002:sink_data
	wire         top_dut_0_io_s_avalon_agent_rp_ready;                              // router_002:sink_ready -> Top_DUT_0_io_S_AVALON_agent:rp_ready
	wire         top_dut_0_io_s_avalon_agent_rp_startofpacket;                      // Top_DUT_0_io_S_AVALON_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         top_dut_0_io_s_avalon_agent_rp_endofpacket;                        // Top_DUT_0_io_S_AVALON_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                              // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [79:0] router_002_src_data;                                               // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                              // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                            // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                      // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                        // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_src_valid;                                                  // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [79:0] router_src_data;                                                   // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                  // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                          // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                            // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [79:0] mm_bridge_0_m0_limiter_cmd_src_data;                               // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [1:0] mm_bridge_0_m0_limiter_cmd_src_channel;                            // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [79:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                 // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire         mm_bridge_0_m0_limiter_rsp_src_valid;                              // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [79:0] mm_bridge_0_m0_limiter_rsp_src_data;                               // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire         mm_bridge_0_m0_limiter_rsp_src_ready;                              // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [1:0] mm_bridge_0_m0_limiter_rsp_src_channel;                            // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire         mm_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire         mm_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [79:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [79:0] cmd_demux_src1_data;                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [79:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [79:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire   [1:0] mm_bridge_0_m0_limiter_cmd_valid_data;                             // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;             // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;             // avalon_st_adapter:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                     // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire         top_dut_0_io_s_avalon_agent_rdata_fifo_src_valid;                  // Top_DUT_0_io_S_AVALON_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] top_dut_0_io_s_avalon_agent_rdata_fifo_src_data;                   // Top_DUT_0_io_S_AVALON_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         top_dut_0_io_s_avalon_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_001:in_0_ready -> Top_DUT_0_io_S_AVALON_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                 // avalon_st_adapter_001:out_0_valid -> Top_DUT_0_io_S_AVALON_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                  // avalon_st_adapter_001:out_0_data -> Top_DUT_0_io_S_AVALON_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                 // Top_DUT_0_io_S_AVALON_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                 // avalon_st_adapter_001:out_0_error -> Top_DUT_0_io_S_AVALON_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                              //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 10, avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //   input,  width = 10,      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              // (terminated),                                        
		.av_begintransfer       (1'b0),                                                              // (terminated),                                        
		.av_chipselect          (1'b0),                                                              // (terminated),                                        
		.av_lock                (1'b0),                                                              // (terminated),                                        
		.uav_clken              (),                                                                  // (terminated),                                        
		.av_clken               (1'b1),                                                              // (terminated),                                        
		.uav_response           (2'b00),                                                             // (terminated),                                        
		.av_response            (),                                                                  // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                              // (terminated),                                        
		.av_writeresponsevalid  ()                                                                   // (terminated),                                        
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clock_in_out_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       //   input,  width = 10, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_write               (),                                                  // (terminated),                                       
		.av_read                (),                                                  // (terminated),                                       
		.av_writedata           (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) top_dut_0_io_s_avalon_translator (
		.clk                    (clock_in_out_clk_clk),                          //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (top_dut_0_io_s_avalon_agent_m0_address),        //   input,  width = 10, avalon_universal_slave_0.address
		.uav_burstcount         (top_dut_0_io_s_avalon_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (top_dut_0_io_s_avalon_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (top_dut_0_io_s_avalon_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (top_dut_0_io_s_avalon_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (top_dut_0_io_s_avalon_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (top_dut_0_io_s_avalon_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (top_dut_0_io_s_avalon_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (top_dut_0_io_s_avalon_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (top_dut_0_io_s_avalon_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (top_dut_0_io_s_avalon_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (Top_DUT_0_io_S_AVALON_address),                 //  output,   width = 7,      avalon_anti_slave_0.address
		.av_write               (Top_DUT_0_io_S_AVALON_write),                   //  output,   width = 1,                         .write
		.av_read                (Top_DUT_0_io_S_AVALON_read),                    //  output,   width = 1,                         .read
		.av_readdata            (Top_DUT_0_io_S_AVALON_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (Top_DUT_0_io_S_AVALON_writedata),               //  output,  width = 32,                         .writedata
		.av_chipselect          (Top_DUT_0_io_S_AVALON_chipselect),              //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_QOS_H                 (64),
		.PKT_QOS_L                 (64),
		.PKT_DATA_SIDEBAND_H       (62),
		.PKT_DATA_SIDEBAND_L       (62),
		.PKT_ADDR_SIDEBAND_H       (61),
		.PKT_ADDR_SIDEBAND_L       (61),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_CACHE_H               (74),
		.PKT_CACHE_L               (71),
		.PKT_THREAD_ID_H           (67),
		.PKT_THREAD_ID_L           (67),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_EXCLUSIVE       (51),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (66),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                              //   input,   width = 1,       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //   input,  width = 10,        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //  output,  width = 80,          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //   input,  width = 80,          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //   input,   width = 2,          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                  // (terminated),                        
		.av_writeresponsevalid ()                                                                   // (terminated),                        
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                        //   input,   width = 1,             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //  output,  width = 10,              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //  output,  width = 80,                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                           //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                           //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                            //   input,  width = 80,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                   //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                     //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                         //   input,   width = 2,                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //   input,  width = 81,                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //  output,  width = 81,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                               //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                               //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                //   input,  width = 34,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                               //   input,   width = 1,                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                       // (terminated),                              
		.m0_writeresponsevalid   (1'b0)                                                         // (terminated),                              
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,   width = 1,       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //   input,  width = 81,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 81,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                        
		.csr_read          (1'b0),                                                        // (terminated),                        
		.csr_write         (1'b0),                                                        // (terminated),                        
		.csr_readdata      (),                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                        
		.almost_full_data  (),                                                            // (terminated),                        
		.almost_empty_data (),                                                            // (terminated),                        
		.in_empty          (1'b0),                                                        // (terminated),                        
		.out_empty         (),                                                            // (terminated),                        
		.in_error          (1'b0),                                                        // (terminated),                        
		.out_error         (),                                                            // (terminated),                        
		.in_channel        (1'b0),                                                        // (terminated),                        
		.out_channel       ()                                                             // (terminated),                        
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) top_dut_0_io_s_avalon_agent (
		.clk                     (clock_in_out_clk_clk),                                   //   input,   width = 1,             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),          //   input,   width = 1,       clk_reset.reset
		.m0_address              (top_dut_0_io_s_avalon_agent_m0_address),                 //  output,  width = 10,              m0.address
		.m0_burstcount           (top_dut_0_io_s_avalon_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (top_dut_0_io_s_avalon_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (top_dut_0_io_s_avalon_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (top_dut_0_io_s_avalon_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (top_dut_0_io_s_avalon_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (top_dut_0_io_s_avalon_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (top_dut_0_io_s_avalon_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (top_dut_0_io_s_avalon_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (top_dut_0_io_s_avalon_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (top_dut_0_io_s_avalon_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (top_dut_0_io_s_avalon_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (top_dut_0_io_s_avalon_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (top_dut_0_io_s_avalon_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (top_dut_0_io_s_avalon_agent_rp_data),                    //  output,  width = 80,                .data
		.rp_startofpacket        (top_dut_0_io_s_avalon_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                  //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                  //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                   //   input,  width = 80,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                          //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                            //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                //   input,   width = 2,                .channel
		.rf_sink_ready           (top_dut_0_io_s_avalon_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (top_dut_0_io_s_avalon_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (top_dut_0_io_s_avalon_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (top_dut_0_io_s_avalon_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (top_dut_0_io_s_avalon_agent_rsp_fifo_out_data),          //   input,  width = 81,                .data
		.rf_source_ready         (top_dut_0_io_s_avalon_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (top_dut_0_io_s_avalon_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (top_dut_0_io_s_avalon_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (top_dut_0_io_s_avalon_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (top_dut_0_io_s_avalon_agent_rf_source_data),             //  output,  width = 81,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //   input,  width = 34,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //   input,   width = 1,                .error
		.rdata_fifo_src_ready    (top_dut_0_io_s_avalon_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (top_dut_0_io_s_avalon_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (top_dut_0_io_s_avalon_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                  // (terminated),                              
		.m0_writeresponsevalid   (1'b0)                                                    // (terminated),                              
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) top_dut_0_io_s_avalon_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                   //   input,   width = 1,       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),          //   input,   width = 1, clk_reset.reset
		.in_data           (top_dut_0_io_s_avalon_agent_rf_source_data),             //   input,  width = 81,        in.data
		.in_valid          (top_dut_0_io_s_avalon_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (top_dut_0_io_s_avalon_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (top_dut_0_io_s_avalon_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (top_dut_0_io_s_avalon_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (top_dut_0_io_s_avalon_agent_rsp_fifo_out_data),          //  output,  width = 81,       out.data
		.out_valid         (top_dut_0_io_s_avalon_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (top_dut_0_io_s_avalon_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (top_dut_0_io_s_avalon_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (top_dut_0_io_s_avalon_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                        
		.csr_read          (1'b0),                                                   // (terminated),                        
		.csr_write         (1'b0),                                                   // (terminated),                        
		.csr_readdata      (),                                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                        
		.almost_full_data  (),                                                       // (terminated),                        
		.almost_empty_data (),                                                       // (terminated),                        
		.in_empty          (1'b0),                                                   // (terminated),                        
		.out_empty         (),                                                       // (terminated),                        
		.in_error          (1'b0),                                                   // (terminated),                        
		.out_error         (),                                                       // (terminated),                        
		.in_channel        (1'b0),                                                   // (terminated),                        
		.out_channel       ()                                                        // (terminated),                        
	);

	pr_region_alternate_altera_merlin_router_171_tzwfaga router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //  output,   width = 1,      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //   input,   width = 1,          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //   input,  width = 80,          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                              //  output,   width = 1,          .valid
		.src_data           (router_src_data),                               //  output,  width = 80,          .data
		.src_channel        (router_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_router_171_dz476wq router_001 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //   input,  width = 80,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                              //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                               //  output,  width = 80,          .data
		.src_channel        (router_001_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_router_171_dz476wq router_002 (
		.sink_ready         (top_dut_0_io_s_avalon_agent_rp_ready),          //  output,   width = 1,      sink.ready
		.sink_valid         (top_dut_0_io_s_avalon_agent_rp_valid),          //   input,   width = 1,          .valid
		.sink_data          (top_dut_0_io_s_avalon_agent_rp_data),           //   input,  width = 80,          .data
		.sink_startofpacket (top_dut_0_io_s_avalon_agent_rp_startofpacket),  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (top_dut_0_io_s_avalon_agent_rp_endofpacket),    //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                          //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                          //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                           //  output,  width = 80,          .data
		.src_channel        (router_002_src_channel),                        //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //  output,   width = 1,          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (66),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                               //   input,  width = 80,          .data
		.cmd_sink_channel       (router_src_channel),                            //   input,   width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //  output,  width = 80,          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //  output,   width = 2,          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //   input,   width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //   input,  width = 80,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //  output,   width = 1,          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //  output,  width = 80,          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //  output,   width = 2,          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          //  output,   width = 2, cmd_valid.data
	);

	pr_region_alternate_altera_merlin_demultiplexer_171_t7zxpci cmd_demux (
		.clk                (clock_in_out_clk_clk),                          //   input,   width = 1,        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //  output,   width = 1,       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //   input,   width = 2,           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //   input,  width = 80,           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //   input,   width = 1,           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         //   input,   width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                           //  output,  width = 80,           .data
		.src0_channel       (cmd_demux_src0_channel),                        //  output,   width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                           //  output,  width = 80,           .data
		.src1_channel       (cmd_demux_src1_channel),                        //  output,   width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                     //  output,   width = 1,           .endofpacket
	);

	pr_region_alternate_altera_merlin_multiplexer_171_7tds3oi cmd_mux (
		.clk                 (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                             //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                              //  output,  width = 80,          .data
		.src_channel         (cmd_mux_src_channel),                           //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                           //   input,  width = 80,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //   input,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_multiplexer_171_7tds3oi cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                          //  output,  width = 80,          .data
		.src_channel         (cmd_mux_001_src_channel),                       //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                           //   input,  width = 80,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //   input,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_demultiplexer_171_qxprg2y rsp_demux (
		.clk                (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                        //   input,   width = 2,          .channel
		.sink_data          (router_001_src_data),                           //   input,  width = 80,          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                          //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                           //  output,  width = 80,          .data
		.src0_channel       (rsp_demux_src0_channel),                        //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //  output,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_demultiplexer_171_qxprg2y rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                        //   input,   width = 2,          .channel
		.sink_data          (router_002_src_data),                           //   input,  width = 80,          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                          //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //  output,  width = 80,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //  output,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_merlin_multiplexer_171_bwlg3ma rsp_mux (
		.clk                 (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                             //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                              //  output,  width = 80,          .data
		.src_channel         (rsp_mux_src_channel),                           //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                          //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                          //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                        //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                           //   input,  width = 80,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                      //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                      //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                    //   input,   width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                       //   input,  width = 80,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),              //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                 //   input,   width = 1,          .endofpacket
	);

	pr_region_alternate_altera_avalon_st_adapter_171_yxzsrmq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,         .ready
		.in_clk_0_clk   (clock_in_out_clk_clk),                                  //   input,   width = 1, in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_out_0_data),                          //  output,  width = 34,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                         //  output,   width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                         //   input,   width = 1,         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                          //  output,   width = 1,         .error
	);

	pr_region_alternate_altera_avalon_st_adapter_171_yxzsrmq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_0_data      (top_dut_0_io_s_avalon_agent_rdata_fifo_src_data),  //   input,  width = 34,     in_0.data
		.in_0_valid     (top_dut_0_io_s_avalon_agent_rdata_fifo_src_valid), //   input,   width = 1,         .valid
		.in_0_ready     (top_dut_0_io_s_avalon_agent_rdata_fifo_src_ready), //  output,   width = 1,         .ready
		.in_clk_0_clk   (clock_in_out_clk_clk),                             //   input,   width = 1, in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_001_out_0_data),                 //  output,  width = 34,    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                //  output,   width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                //   input,   width = 1,         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                 //  output,   width = 1,         .error
	);

endmodule
