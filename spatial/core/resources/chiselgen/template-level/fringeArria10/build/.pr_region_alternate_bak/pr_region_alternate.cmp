	component pr_region_alternate is
		port (
			clk_clk            : in  std_logic                      := 'X';             -- clk
			io_m_axi_0_awid    : out std_logic_vector(5 downto 0);                      -- awid
			io_m_axi_0_awuser  : out std_logic_vector(31 downto 0);                     -- awuser
			io_m_axi_0_awaddr  : out std_logic_vector(31 downto 0);                     -- awaddr
			io_m_axi_0_awlen   : out std_logic_vector(7 downto 0);                      -- awlen
			io_m_axi_0_awsize  : out std_logic_vector(2 downto 0);                      -- awsize
			io_m_axi_0_awburst : out std_logic_vector(1 downto 0);                      -- awburst
			io_m_axi_0_awlock  : out std_logic;                                         -- awlock
			io_m_axi_0_awcache : out std_logic_vector(3 downto 0);                      -- awcache
			io_m_axi_0_awprot  : out std_logic_vector(2 downto 0);                      -- awprot
			io_m_axi_0_awqos   : out std_logic_vector(3 downto 0);                      -- awqos
			io_m_axi_0_awvalid : out std_logic;                                         -- awvalid
			io_m_axi_0_awready : in  std_logic                      := 'X';             -- awready
			io_m_axi_0_arid    : out std_logic_vector(5 downto 0);                      -- arid
			io_m_axi_0_aruser  : out std_logic_vector(31 downto 0);                     -- aruser
			io_m_axi_0_araddr  : out std_logic_vector(31 downto 0);                     -- araddr
			io_m_axi_0_arlen   : out std_logic_vector(7 downto 0);                      -- arlen
			io_m_axi_0_arsize  : out std_logic_vector(2 downto 0);                      -- arsize
			io_m_axi_0_arburst : out std_logic_vector(1 downto 0);                      -- arburst
			io_m_axi_0_arlock  : out std_logic;                                         -- arlock
			io_m_axi_0_arcache : out std_logic_vector(3 downto 0);                      -- arcache
			io_m_axi_0_arprot  : out std_logic_vector(2 downto 0);                      -- arprot
			io_m_axi_0_arqos   : out std_logic_vector(3 downto 0);                      -- arqos
			io_m_axi_0_arvalid : out std_logic;                                         -- arvalid
			io_m_axi_0_arready : in  std_logic                      := 'X';             -- arready
			io_m_axi_0_wdata   : out std_logic_vector(511 downto 0);                    -- wdata
			io_m_axi_0_wstrb   : out std_logic_vector(63 downto 0);                     -- wstrb
			io_m_axi_0_wlast   : out std_logic;                                         -- wlast
			io_m_axi_0_wvalid  : out std_logic;                                         -- wvalid
			io_m_axi_0_wready  : in  std_logic                      := 'X';             -- wready
			io_m_axi_0_rid     : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- rid
			io_m_axi_0_ruser   : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- ruser
			io_m_axi_0_rdata   : in  std_logic_vector(511 downto 0) := (others => 'X'); -- rdata
			io_m_axi_0_rresp   : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- rresp
			io_m_axi_0_rlast   : in  std_logic                      := 'X';             -- rlast
			io_m_axi_0_rvalid  : in  std_logic                      := 'X';             -- rvalid
			io_m_axi_0_rready  : out std_logic;                                         -- rready
			io_m_axi_0_bid     : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- bid
			io_m_axi_0_buser   : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- buser
			io_m_axi_0_bresp   : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- bresp
			io_m_axi_0_bvalid  : in  std_logic                      := 'X';             -- bvalid
			io_m_axi_0_bready  : out std_logic;                                         -- bready
			reset_reset        : in  std_logic                      := 'X';             -- reset
			s0_waitrequest     : out std_logic;                                         -- waitrequest
			s0_readdata        : out std_logic_vector(31 downto 0);                     -- readdata
			s0_readdatavalid   : out std_logic;                                         -- readdatavalid
			s0_burstcount      : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- burstcount
			s0_writedata       : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			s0_address         : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- address
			s0_write           : in  std_logic                      := 'X';             -- write
			s0_read            : in  std_logic                      := 'X';             -- read
			s0_byteenable      : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			s0_debugaccess     : in  std_logic                      := 'X'              -- debugaccess
		);
	end component pr_region_alternate;

